# -*- coding: utf-8 -*-
"""LaboratorioIA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rxg_L0oQJZrw63Vx0uVwGTy2SqTE18Bh

#**Primer Laboratorio de IA**
###Guillen Yarleque Arturo - 20194039J
Primero importando las librerias a usar y leyendo la data 'DataCorazon.csv', cuya data es un registro de pacientes con caracteristicas sobre problemas cardiacos y datos numericos relacionados con la salud
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('DataCorazon.csv')
df.head() #Comando para mostrar las 5 primeras filas de la data

"""###**Item 1.** Mostrar columnas categóricos y numéricos
Mostrando el tipo de variable que son las columnas en la data
"""

print(df.info())
print(df.shape)

"""###**Item 2.** Eliminar nulos completos (por fila)
Eliminando primero los Nulos completos en las filas
"""

#Primero haciendo un muestreo de la cantidad de valores nulos en cada columna del DataFrame, ordenada de menor a mayor.
df.isna().sum().sort_values()

#obsevando las filas llenas con datos nulos
df[df.isnull().all(axis=1)]

# Eliminando filas donde todos los valores son nulos
df= df.dropna(axis=0,how='all')

#Haciendo otro conteo para comprobar los valores nulos
df.isna().sum()

"""###**Item 3.** Eliminar nulos completos (por columna)
Eliminando primero los Nulos completos en las columnas
"""

#obsevando las filas llenas con datos nulos
df.columns[df.isnull().all()]

#Eliminando la Columna Peso
df= df.dropna(axis=1,how='all')

#Haciendo otro conteo para comprobar los valores nulos
df.isna().sum().sort_values()

"""###**Item 4.** Elegir una columna que tiene faltantes imputar con promedio
Imputando con promedio a la variable 'Promedio_nivel_glucosa', y a la variable 'Edad' con eded mediana
"""

#Imputando con el promedio los valores nulos de la columna IMC
Prom = df['Promedio_nivel_glucosa'].mean()
Prom=round(Prom,2)
df['Promedio_nivel_glucosa'].fillna(Prom, inplace=True)
print(Prom)

#Imputando con el Mediana los valores nulos de la columna Edad
Median = df['Edad'].median()
df['Edad'].fillna(Median, inplace=True)
print(Median)

#Comprobando si hay datos nulos en estas columnas
df.isna().sum().sort_values()

"""###**Item 5.**  Elegir una columna que tiene faltantes, imputar con máximo
Imputando con el maximo a las Variable 'Problema_cardiaco' y a la variable 'Hipertension'.
"""

#Teniendo un conteo de los datos para un criterio
print(df.groupby('Problema_Cardiaco').size())
print('\n')
print(df.groupby('Hipertension').size())

#Reemplazando con el maximo valor en cada columna
Maxi = df['Problema_Cardiaco'].max()
df['Problema_Cardiaco'].fillna(Maxi, inplace=True)

Maxi = df['Hipertension'].max()
df['Hipertension'].fillna(Maxi, inplace=True)

#Comprobando si hay datos nulos en estas columnas
df.isna().sum().sort_values()

"""###**Item 6.**   Elegir una columna que tiene faltantes, imputar con mínimo
Imputando con el maximo a las Variable 'Ataque_cardiaco'
"""

#Teniendo un conteo de los datos para un criterio
print(df.groupby('Ataque_cardiaco').size())

#Reemplazando con el minimo valor en la columna
Maxi = df['Ataque_cardiaco'].min()
df['Ataque_cardiaco'].fillna(Maxi, inplace=True)

#Comprobando si hay datos nulos en estas columnas
df.isna().sum().sort_values()

"""###**Item 7.**   Elegir una columna categórica que tiene faltantes, imputar con moda
Imputando con la moda a la Variable 'Zona_Residencia'
"""

#Teniendo un conteo para tener un criterio
print(df.groupby('Zona_residencia').size())
print('\n')
print(df['Zona_residencia'].isnull().sum())

#Reemplazando con la moda en la columna
Moda = df['Zona_residencia'].mode()[0]
df['Zona_residencia'].fillna(Moda, inplace=True)

#Comprobando si hay datos nulos en estas columnas
df.isna().sum().sort_values()

"""###**Item 8.**    Eliminar columnas bajo una condición
Eliminando la columna 'Fumador'
"""

#Teniendo datos para un criterio
Total=len(df)
Nulos=df['Fumador'].isnull().sum()
Porc = (Nulos / Total) * 100
print(round(Porc,2),'%')

#eliminando la columna Fumador
df = df.drop('Fumador', axis=1)

#Comprobando si hay datos nulos en la data
df.isna().sum().sort_values()

"""###**Item 9.**    Eliminar filas bajo una condición
Eliminando algunas filas con criterio en la columna 'Genero'
"""

#Teniendo datos para un criterio
df.groupby('Genero').size()

# Lista para almacenar los índices de las filas a eliminar
Filas_Other = []

# Iterando a través de las filas del DataFrame
for indice, fila in df.iterrows():
    if fila["Genero"]=='Other':
        Filas_Other.append(indice)

# Eliminar las filas encontradas
df= df.drop(Filas_Other)

#Haciendo un contero de grupos para comprobar
df.groupby('Genero').size()

"""###**Item 10.**    Imputar un datos de una columna numérica con regresión múltiple
Imputando los datos en la variable 'IMC' en base a la variable 'Promedio_nivel_glucosa' y la 'edad'
"""

from sklearn.linear_model import LinearRegression

df_f = df[df['IMC'].isnull()]
df_sf = df[~df['IMC'].isnull()]

# Deniendo X e Y para la regresion multiple
X = df_sf[['Edad', 'Promedio_nivel_glucosa']]  # Columnas predictoras
y = df_sf['IMC']  # Columna objetivo (sin valores nulos)

# Creando de sklearn un modelo de regresión
modelo = LinearRegression()

# Ajustando el modelo a los datos disponibles
modelo.fit(X, y)

# Predecir los valores faltantes en 'columna_objetivo' usando el modelo
valores_f= df_f[['Edad', 'Promedio_nivel_glucosa']]  # Características predictoras de los valores faltantes
predicciones = modelo.predict(valores_f)

# Rellena los valores faltantes con las predicciones
df.loc[df['IMC'].isnull(), 'IMC'] = predicciones

#Comprobando si hay datos nulos en la data
df.isna().sum().sort_values()

"""###**Item 11.**  Escalar datos bajo condición de valores
Escalando por ejemplo la variable 'Edad'
"""

#Escalando la variable Edad
from sklearn.preprocessing import MinMaxScaler

escala = MinMaxScaler(feature_range=(0, 1))
df['Edad_Escalada'] = escala.fit_transform(df[['Edad']])
columnas_actuales = df.columns.tolist()
indice_nivel_edad = columnas_actuales.index('Edad_Escalada')
columnas_actuales.pop(indice_nivel_edad)
columnas_actuales.insert(columnas_actuales.index('Edad') + 1, 'Edad_Escalada')
df = df[columnas_actuales]

df['Edad_Escalada'] = df['Edad_Escalada'].round(3)
df.head()

"""###**Item 12.**  Cambiar tipo de dato (atributo)
Cambiando a categorias las variables 'Hipertension', 'ProblemaCardiaco' e 'IMC'
"""

#Primero cambiando de float a int
df['Edad'] = df['Edad'].astype(int)
df['Ataque_cardiaco'] = df['Ataque_cardiaco'].astype(int)
df['Hipertension'] = df['Hipertension'].astype(int)
df['Problema_Cardiaco'] = df['Problema_Cardiaco'].astype(int)

#haciendo un mapeo
mapeo = {0: 'No', 1: 'Sí'}

#Cambiando los valores binarios a Si y NO
df['Ataque_cardiaco'] = df['Ataque_cardiaco'].map(mapeo)
df['Ataque_cardiaco'] = df['Ataque_cardiaco'].astype('category')

df['Hipertension'] = df['Hipertension'].map(mapeo)
df['Hipertension'] = df['Hipertension'].astype('category')

df['Problema_Cardiaco'] = df['Problema_Cardiaco'].map(mapeo)
df['Problema_Cardiaco'] = df['Problema_Cardiaco'].astype('category')

#Definiendio por categorias del indice de masa corporal.
def categoria_NIMC(IMCdef):
    indice = IMCdef['IMC']

    if indice > 30:
          return 'Sobrepeso'
    elif indice > 25:
            return 'Normal'
    else:
            return 'Bajo'

df['Nivel_IMC'] = df.apply(categoria_NIMC, axis=1)


columnas_actuales = df.columns.tolist()
indice_nivel_imc = columnas_actuales.index('Nivel_IMC')
columnas_actuales.pop(indice_nivel_imc)
columnas_actuales.insert(columnas_actuales.index('IMC') + 1, 'Nivel_IMC')

# Reordena las columnas del DataFrame con la nueva secuencia
df = df[columnas_actuales]

df.head()

"""###**Item 13.**   La columna categórica textual, transformar categórico numérico

Transformando por ejemplo las variables 'Genero','Tipo_trabajo' y 'Zona_Residencia'

"""

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

# Aplicando la codificación a la columna categórica
df['Genero'] = label_encoder.fit_transform(df['Genero'])
df['Tipo_trabajo'] = label_encoder.fit_transform(df['Tipo_trabajo'])
df['Zona_residencia'] = label_encoder.fit_transform(df['Zona_residencia'])
df.head()

"""###**Item 14.**  Usar algunas técnicas de transformaciones, explicar en comentario cual modelo matemático de transformación está usando.
Realizando una transformacion logaritmica con las variables 'IMC'


"""

df['log_IMC'] = np.log(df['IMC'])
df['log_IMC'] = df['log_IMC'].round(3)
from sklearn.preprocessing import StandardScaler

# Usando escalado estándar (z-score) para el IMC
scaler = StandardScaler()
df['scaled_IMC'] = scaler.fit_transform(df[['IMC']])
df['scaled_IMC'] = df['scaled_IMC'].round(3)
df.head()

"""###**Item 15.**  Usar algunas técnicas de transformaciones, explicar en comentario cual modelo matemático de transformación está usando.
Realizando una transformacion boxcox con las variables 'Promedio_nivel_glucosa'
"""

from scipy.stats import boxcox


# Aplica la transformación de Box-Cox
transformed_PNG, lambda_value = boxcox(df['Promedio_nivel_glucosa'])

# Crea una nueva columna con los valores transformados
df['boxcox_Promedio_nivel_glucosa'] = transformed_PNG
df['boxcox_Promedio_nivel_glucosa'] = df['boxcox_Promedio_nivel_glucosa'].round(3)
df.head()

"""Finalmente con todos los items ya terminados y la data preprocesada, se procede a guardarlo en un csv"""

df.to_csv('DataCorazonPreProcesado.csv', index=False, sep=',')